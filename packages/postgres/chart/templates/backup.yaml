{{- $first := true -}}
{{- range $type, $schedule := .Values.backup.schedules }}
  {{- if not $first }}
---
  {{- end }}
  {{- include "pgbackrest.cronjob" (dict "context" $ "type" $type "schedule" $schedule) }}
  {{- $first = false -}}
{{- end }}

{{- define "pgbackrest.cronjob" -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: '{{ .context.Values.db }}-pgbackrest-backup-{{ .type }}'
  namespace: '{{ .context.Values.namespace }}'
spec:
  schedule: '{{ .schedule }}'
  jobTemplate:
    spec:
      template:
        spec:
          securityContext:
            fsGroup: 999
          containers:
            - name: pgbackrest
              image: {{ .context.Values.images.pgbackrest }}
              args:
                [
                  'pgbackrest',
                  '--stanza={{ .context.Values.db }}',
                  '--type={{ .type }}',
                  '--config=/etc/pgbackrest.conf',
                  'backup'
                ]
              env:
                - name: MASTER_HOST
                  value: patroni-{{ .context.Values.db }}-primary.{{ .context.Values.namespace }}.svc.cluster.local
                - name: SLAVE_HOST
                  value: patroni-{{ .context.Values.db }}-replicas.{{ .context.Values.namespace }}.svc.cluster.local
                - name: CLIENT_COMMON_NAME
                  value: patroni-{{ .context.Values.db }}
                - name: BACKUP_BUCKET
                  value: '{{ .context.Values.backup.bucket }}'
                - name: BACKUP_PATH
                  value: '{{ .context.Values.backup.path }}'
                - name: S3_KEY
                  valueFrom:
                    secretKeyRef:
                      name: &backup_creds '{{ .context.Values.db }}-db-backup-creds'
                      key: S3_KEY
                - name: S3_KEY_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: *backup_creds
                      key: S3_KEY_SECRET
                - name: S3_REGION
                  value: '{{ .context.Values.s3.region }}'
                - name: S3_ENDPOINT
                  value: '{{ .context.Values.s3.endpoint }}'
                - name: S3_TLS
                  value: '{{ .context.Values.s3.tls }}'
                - name: S3_URI_STYLE
                  value: '{{ .context.Values.s3.uriStyle }}'
                - name: ENCRYPTION_KEY
                  value: '{{ .context.Values.backup.encryptionKey }}'
                - name: STANZA
                  value: '{{ .context.Values.db }}'
                - name: PGUSER
                  valueFrom:
                    secretKeyRef:
                      name: &db_creds '{{ .context.Values.db }}-db-creds'
                      key: PGUSER
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: *db_creds
                      key: PGPASSWORD
              volumeMounts:
                - name: &config pgbackrest-config
                  mountPath: /tmp/conf_templates/pgbackrest.conf
                  subPath: pgbackrest.conf
                - name: &tls pgbackrest-tls
                  mountPath: /etc/pgbackrest
                  readOnly: true
          volumes:
            - name: *config
              configMap:
                name: pgbackrest-server-config
            - name: *tls
              secret:
                secretName: '{{ .context.Values.db }}-pgbackrest-backup-tls'
                defaultMode: 0600
                items:
                  - key: tls.crt
                    path: server.crt
                  - key: tls.key
                    path: server.key
                  - key: ca.crt
                    path: ca.crt
          restartPolicy: OnFailure
      backoffLimit: 4
{{- end }}
